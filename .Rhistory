vect[c("bar","foo")]
nxt()
vect[c("foo","bar")]
true==true
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE&FALSE
TRUE& C(TRUE,FALSE,FALSE)
TRUE&& C(TRUE,FALSE,FALSE)
TRUE& c(TRUE,FALSE,FALSE)
TRUE&& c(TRUE,FALSE,FALSE)
TRUE| c(TRUE,FALSE,FALSE)
TRUE|| c(TRUE,FALSE,FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
play()
isTRUE(3)
identical('twins', 'twins')
identical("twins","twins")
nxt()
identical('twins', 'twins')
xor(5==6, !FALSE)
play()
identical(xor,'xor')
7==7.0
8==8.0
8==8.06
8!=8.0
nxt()
ints<-sample(10)
ints
ints>5
which(ints)
which(ints>7)
any(ints<0)
all(ints>0)
q
q()
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I","am","feeling","lovely")
submit()
mad_libs("Delhi","numerous","dress code")
play()
place
View(mad_libs)
View(mad_libs)
mad_libs("Delhi","numerous","dress code")
place
mad_libs("Delhi","numerous","dress code")
submit()
submit()
'I%p%love%p%R!'
'I'%p%'love'%p%'R!'
mad_libs <- function(...){
# Do your argument unpacking here!
my_list<-list(...)
place<- my_list[["place"]]
adjective<-my_list[["adjective"]]
noun<-my_list[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
s<-list(place="Delhi",adjective="numerous",noun="statue")
s
mad_libs(s)
my_list
my_list<-list(s)
my_list
mad_libs(place="Delhi",adjective="numerous",noun="statue")
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?"matrix"
?matrix()
?matrix
my_matrix2<- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
a<-matrix(c(2,2,3,2),2,2)
a
makeCacheMatrix(a)
cacheSolve(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
inv
View(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
cachemean(1:10'')
cachemean(1:10)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
cachemean(1:10)
makeVector(1:10)
a<-makeVector(1:10)
a
a$getmean()
cachemean(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
cachemean(a)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
cachemean(a)
a
cachemean(1:10)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
cachemean(1:10)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
a<-makeVector(1:10)
a
cachemean(a)
cachemean(1:10)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
c<-matrix(c(2,2,3,2),2,2)
c
b<-makeCacheMatrix(c)
b
cacheSolve(b)
c<-matrix(c(1,-1,1,2),2,2)
b<-makeCacheMatrix(c)
cacheSolve(b)
n<-matrix()
n
solve(n)
debug()
debug(cacheSolve)
cacheSolve(b)
c<-matrix(c(2,2,3,2),2,2)
x<-makeCacheMatrix(c)
debug(cacheSolve)
cacheSolve(x)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/example.R')
cacheSolve(c)
c<-cacheSolve(c)
c<-makeCacheMatrix(c)
c
cacheSolve(c)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(c)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
c<-matrix(c(2,2,3,2),2,2)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
bye()
a<-1:20
b<-matrix(1:20,4,5)
c<-data.frame()
names<-c("Madhuri","Hema","Neha","Divya","Upma")
age<-c(24:28)
ht<-c(5:6 by=0.2)
ht<-seq(5:6 by=0.2)
ht<-seq(5:6, by=0.2)
ht<-seq(5.1:6.1, by=0.2)
?seq
ht<-seq(5.1,6.1, by=0.2)
ht
ht<-seq(5.1,5.9, by=0.2)
ht
c<-rbind(names,ht,age)
c
c<-data.frame(names,ht,age)
c
head(a)
a
head(b)
head(c)
summary(a)
summary(b)
summary(c)
str(a)
str(b)
str(c)
c
d<-str(c)
d$names
?d
d
d<-str(c)
d
?gl
d<-gl(40,10)
d
?dnorm
?dnorm
?rnorm
exit
q
q()
a<-1
class(a)
a = c(1,2,3)
class(a)
a<-list(c(1,2,3),"Madhuri",TRUE)
a
a[1]
a[1,1]
a[1][1]
a[1,2]
a[[1]]
a
a[1]
class(a[1])
class(a[2])
class(a[3])
b = list(1,2,3)
b
b[[1]]
a[[1]]
a[[1]][1]
a
a[1]
a[[1]]
class(a[[1]])
a[[1]][2]
a[[1]][3]
a[[1]][1]
class(a[1])
b= list(1,2,3)
b
b[1]
b[1]class())
class(b[1])
a[[1]]
a[[1]][1]
a$1
a
names(a)<-c("Values","Name","T/F")
a
b<-1:3
names(b)
names(b)<-c("1","2","3")
b
names(b)<-c("a","b","c")
b
b$b
b[b]
b[[b]]
b$b
b[1]
b[a]
b["a""]
b["a"]
b["b"]
b[["b""]]
b[["b"]]
1/0
1/NaN
length(a)
m<-matrix([1:20],4,5)
m<-matrix([1:20],4,5)
m<-matrix(1:20,4,5)
length(m)
m[1,2]<-NA
length(m)
attributes(a)
str(a)
?length
d<-data.frame(1:5, c("M","s","H","N","O")),c(12,13,14,15,16))
d<-data.frame(1:5, c("M","s","H","N","O"),c(12,13,14,15,16))
d
names(d)<-c("Sno","Name","Age")
d
length(d)
nrow(d)
ncol(d)
dim(a)
dim(d)
dim(m)
dimnames(d)
?dimnames
dimnames(m)
m
dimnames(a)
dimnames(b)
b
n<-c(1L,3L)
class(n)
o<-c(1L,3)
class(o)
l<-c("a",1)
as.numeric(l)
as.logical(l)
l<-c("a",TRUE)
l
as.logical(l)
as.numeric(l)
x<-1:3
y<-1:5
rbind(x,y)
class(b)
b
?factor
ab = factor(c('a','b','a'','c','c''))
ab = factor(c('a','b','a,'c','c'))
ab = factor(c('a','b','a','c','c'))
ab
c('a','b','a','c','c')
ac = unclass(ab);
ac
class(ac)
ac[1]
ac[2]
ac[3]
table(ac)
table(ab)
ab
class(ac)
ac
class(table(ac))
ab = factor(c('a','b','a','c','c'),levels = c('b','c','a'))
ab
unclass(ab)
d
dimnames(d)<-list(c("a","b","c","d","e"),c("A","B","C"))
d
?names
names(d)<-list(c("a","b","c","d","e"),c("A","B","C"))
d
source('~/namesVsDimnames.R')
source('~/namesVsDimnames.R')
d
source('~/namesVsDimnames.R')
y = data.frame(a=1,b='a')
u
y
dput(y)
dput(y,file='y.R')
pwd
pwd()
getwd()
new.y = dget('y.R')
class(new())
class(new
)
new.y
new11.y = dget('y.R')
class(new11.y)
new11.y
class(new11.y)
class(new11)
getwd()
structure(list(a = 1, b = structure(1L, .Label = "a", class = "factor")), .Names = c("a",
"b"), row.names = c(NA, -1L), class = "data.frame")
source('y.R')
ab = source('y.R')
ab
class(ab)
ab =2
rm(ab)
ab
ab
x<-list(a=list(10,12,14), b=c(3.14, 2.81))
x
class(x[[1]][3])
class(x[[1]][[3]])
class(x[[2]][[2]])
class(x[[2]][2])
(x[[1]][3])
search()
make.power <- function(n)
pow <- function(x)
{ x^n}
pow
make.power <- function(n) {}
make.power <- function(n) {
pow <- function(x) {}
"b"), row.names = c(NA, -1L), class = "data.frame")
make.power <- function(n) {
pow <- function(x) {
x^n}
pow }
cube = make.power(3)
cube
cube(5)
cube(6)
ls(environment(cube))
get("n",environment(cube))
x<- 2
try <- function(){}
try <- function { x<-4 print(x)}
try <- function() { x<-4 print(x)}
try <- function() { x<-4 ;print(x)}
try()
print(x)
try <- function() { x<<-4 ;print(x)}
try()
print(x)
setwd("~/Personal/Coursera/Git_Repository/ProgrammingAssignment2")
source('example.R')
y = [2 3 4]
y = c(2,3,4)
ab = makeVector(x)
ab
ab$get()
ab$set(y)
ab$get()
rm(y)
ab = makeVector()
ab
ab = makeVector(x)
rm(x)
ab = makeVector(x)
ab
ab$set(c(4,5,6,8))
x
ab$get()
x=numeric()
ab$set(c(4,5,6,8))
x
ab = makeVector(x)
ab$set(c(1,2,3,4))
x
ab$set(c(1,2,3,4))
ab$get()
debug
debug()
debug(cachemean)
cachemean(ab)
debug(cachemean)
cachemean(ab)
source('cachematrix.R')
ab = makeCacheMatrix()
ab
ab$set(matrix(1:4,2,2))
ab$get()
inv = cacheSolve(ab)
inv
inv1 = solve(ab$get)
inv1 = solve(ab$get())
inv1
inv = cacheSolve(ab)
inv
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
ab$set(matrix(1:4,2,2))
ab$get()
ab$set(matrix(c(3,2,2,2),2,2))
ab$get()
i<-cacheSolve(ab)
i
cacheSolve(ab)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
ab$set(matrix(c(3,2,2,2),2,2))
ab$get()
cacheSolve(ab)
cacheSolve(ab)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(ab)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
cacheSolve(ab)
ab$set(matrix(c(1,2,3,4),2,2))
cacheSolve(ab)
source('~/Personal/Coursera/Git_Repository/ProgrammingAssignment2/cachematrix.R')
